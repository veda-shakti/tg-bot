from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from enum import Enum


class MarkupKeys(Enum):
    MAIN_MARKUP         = 1
    CALC_UNKNOWN_TIME   = 2
    HOURS               = 3
    MINUTES             = 4


class ButtonsKeys(Enum):
    CALC            = 'üî¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–æ—Å—Ö–æ–¥—è—â–∏–π –∑–Ω–∞–∫'
    RACHUKE         = 'üåå –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –æ—Å–∏ –†–∞—Ö—É-–ö–µ—Ç—É'
    CHECK_2023      = 'üìÜ –°–≤–µ—Ä—å—Ç–µ –∫–∞–∫–∏–º –¥–ª—è –≤–∞—Å –±—ã–ª 2023'
    DATE_KNOWN      = '‚úÖ –ó–Ω–∞—é —Ç–æ—á–Ω—É—é –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è'
    TIME_UNKNOWN    = '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'
    RETURN          = '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è'


class Markups:
    def __createMarkup__(self, button_keys: list[ButtonsKeys]) -> ReplyKeyboardMarkup:
        markup = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=str(button.value))] 
                for button in button_keys
            ],
            resize_keyboard=True
        )
        return markup
    
    def __createInlineMarkup__(self, button_keys: list[ButtonsKeys], row_width: int = 1) -> InlineKeyboardMarkup:
        buttons = []
        for button in button_keys:
            if isinstance(button, ButtonsKeys):
                # –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ ButtonsKeys –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞ value –∏ name
                text = str(button.value)
                callback_data = str(button.name)
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö (—á–∏—Å–µ–ª) –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è
                text = str(button)
                callback_data = f"time:{button}"  # –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è callback_data

            buttons.append(InlineKeyboardButton(text=text, callback_data=callback_data))

        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ row_width
        keyboard = [buttons[i:i + row_width] for i in range(0, len(buttons), row_width)]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    def __init__(self):
        self._markups = {
            MarkupKeys.MAIN_MARKUP: self.__createInlineMarkup__([
                ButtonsKeys.CALC
            ]),

            MarkupKeys.CALC_UNKNOWN_TIME: self.__createMarkup__([
                ButtonsKeys.TIME_UNKNOWN
            ]),

            MarkupKeys.HOURS: self.__createInlineMarkup__([
                ' ', '–ß–∞—Å', ' ',
                *[HOUR for HOUR in range(24)]
            ], row_width=3),

            MarkupKeys.MINUTES: self.__createInlineMarkup__([
                ' ', ' ', '–ú–∏–Ω', ' ', ' ',
                *[HOUR for HOUR in range(0, 60, 5)]
            ], row_width=5)
        }

    async def __getitem__(self, key: MarkupKeys):
        return self._markups.get(key)


markups = Markups()
